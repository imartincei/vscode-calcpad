{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "CalcPad",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#commands"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#html-tags"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#brackets"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#units"
    },
    {
      "include": "#macros"
    },
    {
      "include": "#input"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.calcpad",
          "match": "(?i)#(if|else\\s+if|else|end\\s+if|rad|deg|gra|val|equ|noc|round|format|show|hide|varsub|nosub|novar|split|wrap|pre|post|repeat|for|while|loop|break|continue|include|local|global|def|end\\s+def|pause|input|md|read|write|append|fetch)\\b"
        },
        {
          "name": "keyword.other.calcpad",
          "match": "(?i)\\b(default|on|off|from|to|sep|type)\\b"
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "name": "support.function.command.calcpad",
          "match": "(?i)\\$(find|root|sup|inf|area|integral|slope|repeat|sum|product|plot|map)\\b"
        }
      ]
    },
    "html-tags": {
      "patterns": [
        {
          "name": "meta.tag.html.calcpad",
          "begin": "<(/?)(h[1-6]|p|div|span|br|hr|b|i|u|strong|em|sup|sub|table|tr|td|th|ul|ol|li|img|a)\\b",
          "end": "/?>",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.tag.begin.html.calcpad"
            },
            "1": {
              "name": "punctuation.definition.tag.slash.html.calcpad"
            },
            "2": {
              "name": "entity.name.tag.html.calcpad"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.html.calcpad"
            }
          },
          "patterns": [
            {
              "include": "#html-attributes"
            }
          ]
        }
      ]
    },
    "html-attributes": {
      "patterns": [
        {
          "name": "entity.other.attribute-name.html.calcpad",
          "match": "\\b[a-zA-Z-]+(?=\\s*=)"
        },
        {
          "name": "string.quoted.double.html.calcpad",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.html.calcpad",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.html.calcpad",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.html.calcpad",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "html-comments": {
      "patterns": [
        {
          "name": "comment.block.html.calcpad",
          "begin": "<!--",
          "end": "-->",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.html.calcpad"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.html.calcpad"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.calcpad",
          "match": "\"(\"\"|[^\"\\n])*(\"|$)",
          "captures": {
            "0": {
              "patterns": [
                {
                  "name": "constant.character.escape.calcpad",
                  "match": "\"\""
                }
              ]
            }
          }
        },
        {
          "name": "string.quoted.single.calcpad",
          "match": "'(''|[^'\\n])*('|$)",
          "captures": {
            "0": {
              "patterns": [
                {
                  "name": "constant.character.escape.calcpad",
                  "match": "''"
                }
              ]
            }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.builtin.calcpad",
          "match": "(?i)\\b(abs|mod|gcd|lcm|sin|cos|tan|csc|sec|cot|asin|acos|atan|atan2|acsc|asec|acot|sinh|cosh|tanh|csch|sech|coth|asinh|acosh|atanh|acsch|asech|acoth|log|ln|log_2|exp|sqr|sqrt|cbrt|root|round|floor|ceiling|trunc|sign|negate|re|im|phase|min|max|sum|sumsq|srss|product|average|mean|if|switch|take|line|spline|random|not|and|or|xor|timer|hp|ishp|vector|vector_hp|len|size|fill|range|range_hp|join|resize|first|last|slice|sort|rsort|order|revorder|reverse|extract|search|count|find|find_eq|find_ne|find_lt|find_gt|find_le|find_ge|lookup|Lookup_eq|Lookup_ne|Lookup_lt|Lookup_gt|Lookup_le|Lookup_ge|norm|norm_1|norm_2|norm_e|norm_i|norm_p|unit|dot|cross|matrix|identity|diagonal|column|utriang|ltriang|symmetric|vec2diag|diag2vec|vec2col|vec2row|matrix_hp|identity_hp|diagonal_hp|column_hp|utriang_hp|ltriang_hp|symmetric_hp|join_cols|join_rows|augment|stack|mfill|fill_row|fill_col|mresize|copy|add|n_rows|n_cols|row|col|extract_rows|extract_cols|submatrix|mnorm|mnorm_2|mnorm_e|mnorm_1|mnorm_i|cond|cond_1|cond_2|cond_e|cond_i|det|rank|transp|trace|inverse|adj|cofactor|eigenvals|eigenvecs|eigen|lu|qr|svd|cholesky|lsolve|clsolve|slsolve|msolve|cmsolve|smsolve|hprod|fprod|kprod|sort_cols|rsort_cols|sort_rows|rsort_rows|order_cols|revorder_cols|order_rows|revorder_rows|mcount|mfind|mfind_eq|mfind_ne|mfind_lt|mfind_le|mfind_gt|mfind_ge|msearch|hlookup|hlookup_eq|hlookup_ne|hlookup_lt|hlookup_le|hlookup_gt|hlookup_ge|vlookup|vlookup_eq|vlookup_ne|vlookup_lt|vlookup_le|vlookup_gt|vlookup_ge|getunits|setunits|clrunits)(?=\\s*\\()"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.with-units.calcpad",
          "match": "\\b(\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\s*([a-zA-ZΩ°′″‴µ]+)\\b",
          "captures": {
            "1": {
              "name": "constant.numeric.calcpad"
            },
            "2": {
              "name": "support.type.units.calcpad"
            }
          }
        },
        {
          "name": "constant.numeric.complex.with-units.calcpad",
          "match": "\\b(\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)i\\s*([a-zA-ZΩ°′″‴µ]+)\\b",
          "captures": {
            "1": {
              "name": "constant.numeric.complex.calcpad"
            },
            "2": {
              "name": "support.type.units.calcpad"
            }
          }
        },
        {
          "name": "constant.numeric.calcpad",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.complex.calcpad",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?i\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.calcpad",
          "match": "[+\\-*/^÷\\\\⦼]"
        },
        {
          "name": "keyword.operator.comparison.calcpad",
          "match": "[<>=≤≥≡≠]"
        },
        {
          "name": "keyword.operator.logical.calcpad",
          "match": "[!∧∨⊕]"
        },
        {
          "name": "keyword.operator.assignment.calcpad",
          "match": "="
        },
        {
          "name": "punctuation.separator.calcpad",
          "match": "[;|&@:]"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "name": "punctuation.section.brackets.calcpad",
          "match": "[\\[\\](){}]"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.calcpad",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "units": {
      "patterns": [
        {
          "name": "support.type.units.calcpad",
          "match": "(?<=[\\d\\s])\\b([a-zA-ZΩ°′″‴µ]+)\\b"
        }
      ]
    },
    "macros": {
      "patterns": [
        {
          "name": "variable.parameter.macro.calcpad",
          "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "input": {
      "patterns": [
        {
          "name": "variable.language.input.calcpad",
          "match": "\\?"
        },
        {
          "name": "punctuation.definition.input.calcpad",
          "match": "#\\{[^}]*\\}"
        }
      ]
    }
  },
  "scopeName": "source.calcpad"
}